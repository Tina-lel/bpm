#!/bin/bash
#===============================================================================
# bpm - A Bash-based System Package Manager
# Authors: Tina-lel and Justus0405
# License: GNU General Public License v2.0
# Upstream: https://github.com/Tina-lel/bpm
# Dependencies : bash, curl, tar, gzip
#
# bpm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License v2.0 for more details.
#
# You should have received a copy of the
# GNU General Public License v2.0 along with bpm.
# If not, see <https://www.gnu.org/licenses/>.
#
# Tina was here
#===============================================================================

# Global Variables
export VERSION="0.1"

# Color variables
export RED="\e[1;31m"
export GREEN="\e[1;32m"
export YELLOW="\e[1;33m"
export CYAN="\e[1;36m"
export GRAY="\e[1;90m"
export ENDCOLOR="\e[0m"

# Info variables
export SUCCSESS="${GRAY}[${GREEN}✓${GRAY}]${ENDCOLOR}"
export ERROR="${RED}Error:${ENDCOLOR}"
export SECTION="${GRAY}[${YELLOW}!${GRAY}]${ENDCOLOR}"
export INFO="${GRAY}[${CYAN}i${GRAY}]${ENDCOLOR}"

# FUNCTIONS

# Creates config incase it doesnt exist and sources config file
check_conf() {
    DIRMAIN="$HOME/.config/bpm"
    if [[ ! -d "$DIRMAIN" ]]; then
        mkdir -p "$DIRMAIN"
        touch "$DIRMAIN/bpm.conf"

        echo "# Created by bpm on $(date '+%Y\%m\%d')" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "REPO=\"\"" >>"$DIRMAIN/bpm.conf"
        echo "WORKING_DIR=\"$HOME/.cache/bpm\"" >>"$DIRMAIN/bpm.conf"
    fi
    source "$DIRMAIN/bpm.conf"
}

check_args() {
    case $1 in
    "add")
        shift
        add_packages "$@"
        ;;
    "del")
        shift
        del_packages "$@"
        ;;
    "search")
        shift
        search_package "$1"
        ;;
    "info")
        shift
        info_package "$1"
        ;;
    "update")
        update_packagelist
        ;;
    "upgrade")
        upgrade_package
        ;;
    "list")
        info_packagelist
        ;;
    "help")
        help_message
        ;;
    "version")
        version_message
        ;;
    "")
        echo -e "${ERROR} no operation specified"
        exit 1
        ;;
    *)
        echo -e "${ERROR} unrecognized option '$1'"
        exit 1
        ;;
    esac
}

add_packages() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no targets specified."
        exit 1
    fi

    local packages=("$@")
    local package_amount=${#packages[@]}

    # This checks wether or not the specified package name is available at the
    # remote repo via an http code (200 means downloadable, so continue)
    for package_check in "${packages[@]}"; do
        AVAILABILITY=$(curl -o /dev/null --silent -Iw "%{http_code}" "$REPO/info/$package_check.info")
        if [[ "$AVAILABILITY" != "200" ]]; then
            echo -e "${ERROR} Cant download package info for '$package_check'"
            exit 1
        fi
    done

    echo -e ""
    echo -e "${INFO} Packages ($package_amount): ${packages[*]}"
    echo -e ""
    read -rp "Proceed with installation? [Y/n] " confirm
    case "$confirm" in
    [nN])
        echo -e "${RED}Aborted.${ENDCOLOR}"
        exit 0
        ;;
    *)
        for package_inst in "${packages[@]}"; do
            echo -e "${SECTION} Installing $package_inst"
            install_package "$package_inst"
        done
        ;;
    esac
}

install_package() {
    local package="$1"

    mkdir -p "$WORKING_DIR"
    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }

    echo -e "${INFO} Downloading package..."
    curl -s -o "$package.tar.gz" "$REPO/$package.tar.gz"
    curl -s -o "$package.info" "$REPO/info/$package.info"

    echo -e "${INFO} Verifying checksum..."
    cat "$package.info" | tail -n 1 | md5sum --quiet -c - || {
        echo -e "${ERROR} Checksum missmatch"
        exit 1
    }

    echo -e "${INFO} Extracting package..."
    tar -xzf "$package.tar.gz"
    PKG_DIR="$WORKING_DIR/$package"

    echo -e "${INFO} Loading build info..."
    source "$PKG_DIR/pkg_info"

    if [[ "$DOWNLOAD" == "true" ]]; then
        echo -e "${INFO} Downloading source..."
        DOWNLOAD_SRC
    fi

    if [[ "$COMPILE" == "true" ]]; then
        echo -e "${INFO} Compiling source..."
        COMPILE_SRC
    fi

    echo -e "${INFO} Installing package..."
    INSTALL_PKG

    echo -e "${INFO} Cleaning up...\n"
    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }
    rm -rf "$package.tar.gz" "$package.info" "$package"
}

search_package() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no package specified."
        exit 1
    fi
    local package="$1"
    echo -e "${INFO} Searching for $package"
    curl --silent "$REPO"/ | grep -o 'href=".*">' | sed -e "s/href=\"//g" | sed -e 's/">//g' | tail -n +2 | grep -v "info/" | grep "$package"
}

info_package() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no package specified."
        exit 1
    fi
    local package="$1"

    AVAILABILITY_INFO=$(curl -o /dev/null --silent -Iw "%{http_code}" "$REPO/info/$package.info")
    if [[ "$AVAILABILITY_INFO" != "200" ]]; then
        echo -e "${ERROR} Cant download info for '$package'"
        exit 1
    fi
    echo -e "${INFO} Info for $package"
    curl --silent "$REPO/info/$package.info"
}

info_packagelist() {
    echo -e "${INFO} Listing of $REPO\n"
    curl --silent "$REPO"/ | grep -o 'href=".*">' | sed -e "s/href=\"//g" | sed -e 's/">//g' | tail -n +2 | grep -v "info/"
}

help_message() {
    echo -e "usage:  bpm <operation> [...]"
    echo -e "operations:"
    echo -e "    bpm add     [package(s)]"
    echo -e "    bpm del     [package(s)]"
    echo -e "    bpm search  [package]"
    echo -e "    bpm info    [package]"
    echo -e "    bpm list"
    echo -e "    bpm update"
    echo -e "    bpm upgrade"
    echo -e "    bpm help"
    echo -e "    bpm version"
    echo -e ""
    exit 0
}

version_message() {
    echo -e ""
    echo -e "───▄▄▄         bpm v$VERSION - bash 5.2.37"
    echo -e "─▄▀░▄░▀▄       Copyright (C) 2024-present Tina-lel"
    echo -e "─█░█▄▀░█       Copyright (C) 2024-present Justus0405"
    echo -e "─█░▀▄▄▀█▄█▄▀"
    echo -e "▄▄█▄▄▄▄███▀    This program may be freely redistributed under"
    echo -e "               the terms of the GNU General Public License v2.0"
    echo -e ""
    exit 0
}

# PROGRAM START

check_conf
check_args "$@"
