#!/bin/bash
#===============================================================================
# bpm - A Bash-based System Package Manager
# Authors: Tina-lel and Justus0405
# License: GNU General Public License v2.0
# Upstream: https://github.com/Tina-lel/bpm
# Dependencies : bash, curl, tar, gzip
#
# bpm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License v2.0 for more details.
#
# You should have received a copy of the
# GNU General Public License v2.0 along with bpm.
# If not, see <https://www.gnu.org/licenses/>.
#
# Tina was here
#===============================================================================

# Global Variables
export BPM_VERSION="0.1"
export DIRMAIN="$HOME/.config/bpm"

# Color variables
export RED="\e[1;31m"
export GREEN="\e[1;32m"
export YELLOW="\e[1;33m"
export CYAN="\e[1;36m"
export GRAY="\e[1;90m"
export BOLD="\e[1m"
export ENDCOLOR="\e[0m"

# Info variables
export SUCCESS="${GRAY}[${GREEN}âœ“${GRAY}]${ENDCOLOR}"
export ERROR="${RED}Error:${ENDCOLOR}"
export WARNING="${GRAY}[${RED}!${GRAY}]${ENDCOLOR}"
export SECTION="${GRAY}[${YELLOW}!${GRAY}]${ENDCOLOR}"
export INFO="${GRAY}[${CYAN}i${GRAY}]${ENDCOLOR}"

# FUNCTIONS

# Creates essential directories and files in case they dont exist
create_conf() {
    if [[ ! -d "$DIRMAIN" ]]; then
        mkdir -p "$DIRMAIN"
        mkdir -p "$DIRMAIN/index"
        mkdir -p "$DIRMAIN/remote"
        touch "$DIRMAIN/bpm.conf"

        echo "# Created by bpm on $(date '+%Y\%m\%d')" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "REPO=(\"\")" >>"$DIRMAIN/bpm.conf"
        echo "SORT=(\"\")" >>"$DIRMAIN/bpm.conf"
        echo "WORKING_DIR=\"$HOME/.cache/bpm\"" >>"$DIRMAIN/bpm.conf"
        echo "PROGRESS_BAR=\"true\"" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "COMMON_FLAGS=\"-g -O3 -march=native -pipe\"" >>"$DIRMAIN/bpm.conf"
        echo "CFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "CPPFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "CXXFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "MAKEFLAGS=\"-j$(nproc)\"" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "RUSTFLAGS=\"--release -j $(nproc)\"" >>"$DIRMAIN/bpm.conf"
    fi
}

# Sources the config file for the script to know the working directory and repo declared by the user
# The working directory is used to download, cache and compile the packages that are about to be installed
exec_conf() {
    if [[ -f "$DIRMAIN/bpm.conf" ]]; then
        source "$DIRMAIN/bpm.conf"
    else
        echo -e "${ERROR} no config file in $DIRMAIN, use \"bpm config\" to generate one"
        exit 1
    fi

    if [[ -z "${WORKING_DIR}" ]]; then
        echo -e "${ERROR} WORKING_DIR unset, check config file"
        exit 1
    fi

    mkdir -p "$WORKING_DIR"
}

# gets passed all starting arguments in an array at # PROGRAM START
# located at the bottom of this file
#
# Runs pre-checks for each action ensuring the right paths, configs and permissions
# (except for help and verion because lol)
# Then it removes the argument from the array using shift, for further processing.
# Example: bpm add flora socat -> goes to the add case, does pre-checks, removes the first
# argument and shifts everything the left, going from $1=add $2= flora $3=socat to
# $1=flora $2=socat
check_args() {
    case $1 in
    "add")
        exec_conf
        check_packagelist
        shift
        add_packages "$@"
        ;;
    "del")
        exec_conf
        shift
        del_packages "$@"
        ;;
    "update")
        exec_conf
        update_packagelist
        ;;
    "upgrade")
        exec_conf
        #update_packagelist
        check_packagelist
        upgrade_packages
        ;;
    "config")
        create_conf
        ;;
    "clean")
        exec_conf
        clean_cache
        ;;
    "depclean")
        exec_conf
        clean_comp_deps
        ;;
    "search")
        exec_conf
        check_packagelist
        shift
        search_package "$1"
        ;;
    "info")
        exec_conf
        check_packagelist
        shift
        info_package "$1"
        ;;
    "list")
        exec_conf
        check_packagelist
        info_packagelist
        ;;
    "index")
        info_index
        ;;
    "help")
        help_message
        ;;
    "version")
        version_message
        ;;
    "")
        echo -e "${ERROR} no operation specified. Use $0 help"
        exit 1
        ;;
    *)
        echo -e "${ERROR} unrecognized option '$1'. Use $0 help"
        exit 1
        ;;
    esac
}

# Checks if any packages are specified as arguments, and if not, exits with an error
# Sources the remote package info file
# Initializes local variables to track the sizes of packages and their extraction sizes

# Loops through each specified package and checks if the package is already installed
# If the package is installed, compares the installed version with the remote version
# If the version is different, prompts for update; if same, prompts for reinstallation

# Loops through each package and retrieves its info file
# Accumulates the total download and extracted sizes for all packages
# Checks if the package has dependencies, adding them to the package list if needed
# Checks if the package has compile dependencies, adding them to the package list if needed

# Calculates the total number of packages and prints out the details of the packages and their sizes
# Asks for user confirmation to proceed with installation

# If the user cancels, it removes the info files and exits with a cancellation message
# Otherwise, proceeds to install each package in the list
add_packages() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no targets specified."
        exit 1
    fi

    source "$DIRMAIN/remote_info"

    local packages=("$@")
    local packages_size=0
    local packages_size_final=0

    for package in "${packages[@]}"; do
        if [[ -f "$DIRMAIN/index/$package" ]]; then
            source "$DIRMAIN/index/$package"
            REMOTE_VERSION="${!package}"
            if [[ "$VERSION" != "$REMOTE_VERSION" ]]; then
                echo -e "${SECTION} Updating $package ($VERSION -> $REMOTE_VERSION)"
            else
                echo -e "${SECTION} package $package already installed, reinstalling..."
            fi
        fi
    done

    for package_check in "${packages[@]}"; do

        cp $DIRMAIN/remote/$package_check.info "$WORKING_DIR/$package_check.info" >/dev/null 2>&1
        if [[ "$?" != 0 ]]; then
            echo -e "${ERROR} Cant get package info for $package_check"
            exit 1
        else
            source "$WORKING_DIR/$package_check.info" >/dev/null 2>&1
            packages_size=$(("$packages_size" + "$SIZE"))
            packages_size_final=$(("$packages_size_final" + "$SIZE_EXTRACT"))

            # check for dependencies
            if [[ "${#DEPENDENCIES[@]}" != 0 ]]; then
                for dep in "${DEPENDENCIES[@]}"; do
                    if [[ ! -f "$DIRMAIN/index/$dep" ]]; then
                        echo "DEP=\"true\"" | cat - $DIRMAIN/remote/$dep.info >"$WORKING_DIR/$dep.info"
                        packages=("$dep" "${packages[@]}")
                    fi
                done
            fi
            if [[ "${#COMPILE_DEPENDENCIES[@]}" != 0 ]]; then
                for dep in "${COMPILE_DEPENDENCIES[@]}"; do
                    if [[ ! -f "$DIRMAIN/index/$dep" ]]; then
                        echo "COMP_DEP=\"true\"" | cat - $DIRMAIN/remote/$dep.info >"$WORKING_DIR/$dep.info"
                        packages=("$dep" "${packages[@]}")
                    fi
                done
            fi
        fi
    done

    local package_amount=${#packages[@]}

    echo -e ""
    echo -e "${INFO} Packages ($package_amount): ${packages[*]}"
    echo -e ""
    echo -e "Total Download Size:  $(numfmt --to=iec $packages_size)"
    echo -e "Total Extracted Size: $(numfmt --to=iec $packages_size_final)"
    echo -e ""
    read -rp "Proceed with installation? [Y/n] " confirm
    case "$confirm" in
    [nN])
        rm -f $WORKING_DIR/*.info
        echo -e "${RED}Aborted.${ENDCOLOR}"
        exit 0
        ;;
    *)
        for package_inst in "${packages[@]}"; do
            echo -e "${SECTION} Installing $package_inst"
            install_package "$package_inst"
        done
        ;;
    esac
}

# Starts the installation of a package by accepting the package name as an argument
# Sets the error handling mode to not exit immediately on errors (set +e)
# Changes the current directory to the working directory
# If changing the directory fails, it prints an error and exits
#
# Begins downloading the package from a repository using curl
# If PROGRESS_BAR is enabled, it shows a progress bar during download, otherwise it suppresses the progress
#
# Verifies the integrity of the downloaded package by checking its checksum
# If the checksum doesn't match, it prints an error and exits
#
# Extracts the downloaded package using tar
# Sets the PKG_DIR variable to the directory where the package is extracted
#
# Loads build information for the package by sourcing the pkg_info file from the extracted directory
# Restores error handling mode to exit immediately on errors (set -e)
#
# If DOWNLOAD is set to true, downloads source code externally using a function called DOWNLOAD_SRC
# If COMPILE is set to true, compiles the source code using a function called COMPILE_SRC
#
# Installs the package using either doas or sudo (if ROOT_FOR_INSTALL is true) or directly if not
# It uses a bash command to install the package with necessary environment variables
#
# Writes the installed package details (such as files, dependencies, version, etc.) to the package's index file
#
# Cleans up by removing the downloaded tarball, package info file, and extracted directory
# Changes back to the working directory before cleaning up
install_package() {
    local package="$1"
    set +e

    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }

    echo -e "${INFO} Downloading package..."
    source "$package.info" >/dev/null 2>&1
    if [[ "$PROGRESS_BAR" == "true" ]]; then
        curl --progress-bar -o "$package.tar.gz" "$REPO/$SORT/$package.tar.gz"
    else
        curl -s -o "$package.tar.gz" "$REPO/$SORT/$package.tar.gz"
    fi

    # Dont forget to install coreutils for your beloved alpine Tina :3
    # yea i fukin did
    echo -e "${INFO} Verifying checksum..."
    cat "$package.info" | tail -n 1 | md5sum --quiet -c - || {
        echo -e "${ERROR} Checksum missmatch"
        exit 1
    }

    echo -e "${INFO} Extracting package..."
    tar -xzf "$package.tar.gz"
    # Used in the pkg_info file inside the package for the package
    # specified build/install instructions
    PKG_DIR="$WORKING_DIR/$package"

    echo -e "${INFO} Loading build info..."
    source "$PKG_DIR/pkg_info"
    set -e

    # Checks if DOWNLOAD is true in case the source code must be downlaoded externally
    if [[ "$DOWNLOAD" == "true" ]]; then
        echo -e "${INFO} Downloading source..."
        DOWNLOAD_SRC
    fi

    # Checks if COMPILE is true in case the source code must be compiled
    if [[ "$COMPILE" == "true" ]]; then
        echo -e "${INFO} Compiling source..."
        COMPILE_SRC
    fi

    echo -e "${INFO} Installing package..."
    if [[ "$ROOT_FOR_INSTALL" == "true" ]]; then
        # this might be a security vulnurability, but its better than before xd
        if command -v doas 2>&1 >/dev/null; then
            doas bash -c "$(declare); INSTALL_PKG" 2>/dev/null
        elif command -v sudo 2>&1 >/dev/null; then
            sudo bash -c "$(declare); INSTALL_PKG" 2>/dev/null
        fi
    else
        INSTALL_PKG
    fi

    echo "INSTALLED_FILES=(${INSTALLED_FILES[*]})" >"$DIRMAIN/index/$package"
    echo "DEPENDENCIES=(${DEPENDENCIES[*]})" >>"$DIRMAIN/index/$package"
    echo "ROOT_FOR_INSTALL=$ROOT_FOR_INSTALL" >>"$DIRMAIN/index/$package"
    echo "VERSION=$VERSION" >>"$DIRMAIN/index/$package"
    echo "SORT=$SORT" >>"$DIRMAIN/index/$package"
    echo "SIZE=$SIZE" >>"$DIRMAIN/index/$package"
    if [[ "$COMP_DEP" == "true" ]]; then
        echo "COMP_DEP=\"true\"" >>"$DIRMAIN/index/$package"
        COMP_DEP=""
    elif [[ "$DEP" == "true" ]]; then
        echo "DEP=\"true\"" >>"$DIRMAIN/index/$package"
        DEP=""
    fi

    echo -e "${INFO} Cleaning up...\n"
    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }
    rm -rf "$package.tar.gz" "$package.info" "$package"
}

# Starts the process of removing one or more packages passed as arguments
# Checks if any package names were provided; if not, it prints an error and exits
#
# Initializes local variables: an array to hold the packages, a variable to keep track of total size,
# and a counter for the number of packages
#
# Iterates through each package in the provided list:
# - If the package is not installed (doesn't have an index file), it prints an error and exits
# - If the package is installed, it sources the package's index to retrieve details
# - It calculates the total size of the packages to be removed
#
# It changes the current directory to the package index location and checks if any other packages depend on
# the current package being processed, warning the user about dependencies
#
# After checking all the packages, it displays a summary of the total size to be removed and prompts the user
# for confirmation before proceeding with the removal
#
# If the user confirms (y or Y), it proceeds to remove each package by calling the remove_package function
# If the user cancels (any other input), it aborts the process and exits
del_packages() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no targets specified."
        exit 1
    fi

    local packages=("$@")
    local packages_size=0
    local package_amount=${#packages[@]}

    # there i fixed the shit
    for package in "${packages[@]}"; do
        if [[ ! -f "$DIRMAIN/index/$package" ]]; then
            echo -e "${ERROR} package '$package' not installed"
            exit 1
        else
            source "$DIRMAIN/index/$package"
            packages_size=$(("$packages_size" + "$SIZE"))

            cd "$DIRMAIN/index/" || {
                echo -e "failed to change temp dir"
                exit 1
            }

            for info in *; do
                source "$DIRMAIN/index/$info"
                if [[ " ${DEPENDENCIES[*]} " =~ [[:space:]]${package}[[:space:]] ]]; then
                    echo -e "${WARNING} $info depends on $package!"
                fi
            done
        fi
    done

    echo -e ""
    echo -e "${WARNING} Packages ($package_amount): ${packages[*]}"
    echo -e ""
    echo -e "Total Removed Size: -$(numfmt --to=iec $packages_size)"
    echo -e ""
    read -rp "Proceed with removal? [y/N] " confirm
    case "$confirm" in
    [yY])
        for package_del in "${packages[@]}"; do
            echo -e "${SECTION} Removing $package_del"
            remove_package "$package_del"
        done
        ;;
    *)
        echo -e "${RED}Aborted.${ENDCOLOR}"
        exit 0
        ;;
    esac
}

# Starts the removal of a specified package by accepting the package name as an argument
# Sources the package's index file to retrieve details about the installed files
#
# Checks if there are any installed files for the package; if there are none, it prints an error
#
# If ROOT_FOR_INSTALL is true, the function attempts to delete the installed files with elevated privileges:
# - It checks for the presence of either `doas` or `sudo` and uses the appropriate command to remove the files
#
# If ROOT_FOR_INSTALL is not true, it deletes the files directly without using elevated privileges
#
# After deleting the installed files, it removes the package's index from the directory
remove_package() {
    local package="$1"
    source "$DIRMAIN/index/$package"

    if [[ "${#INSTALLED_FILES[@]}" == 0 ]]; then
        echo -e "${ERROR} No files to delete"
    fi

    if [[ "$ROOT_FOR_INSTALL" == "true" ]]; then
        for file_del in "${INSTALLED_FILES[@]}"; do
            echo -e "${WARNING} Deleting $file_del"
            # Does not work with doas ;)
            if command -v doas 2>&1 >/dev/null; then
                doas rm -rf "$file_del"
            elif command -v sudo 2>&1 >/dev/null; then
                sudo rm -rf "$file_del"
            fi
        done
    else
        for file_del in "${INSTALLED_FILES[@]}"; do
            echo -e "${WARNING} Deleting $file_del"
            rm -rf "$file_del"
        done
    fi

    echo -e "${WARNING} Deleting index for $package"
    rm -rf "$DIRMAIN/index/$package"
}

# Starts the process of updating the local package list by refreshing remote information
# Sets the script to exit immediately on errors (set -e)
#
# Changes the current directory to the remote directory; if it fails, it prints an error and exits
# Removes any existing files in the remote directory to prepare for fresh data
#
# Iterates through each remote repository and sorting type from the REPO and SORT arrays:
# - Downloads the remote BPMINFO.tar.gz file from each repository/sort combination
# - Extracts the tarball content into the directory, stripping leading directory components
# - Displays a success message once the extraction is complete
#
# After refreshing the local remote info, it writes the version, sort, and description details of the packages
# to a new file called remote_info, formatted in a way that's easy to parse
update_packagelist() {
    set -e
    echo -e "${INFO} Refreshing local remote info"
    cd "$DIRMAIN/remote" || {
        echo -e "failed to change dir"
        exit 1
    }

    rm -rf *

    for remote_repo in "${REPO[@]}"; do
        for remote_sort in "${SORT[@]}"; do
            echo -ne "$remote_repo/$remote_sort... "
            curl --silent --output - "$remote_repo/$remote_sort/BPMINFO.tar.gz" | tar -xzf - --strip-components=1
            echo -e "${SUCCESS}"
        done
    done

    echo -e "${INFO} Writing remote file"
    for info in *; do
        VERSION=$(cat "$info" | grep -m 1 '^VERSION=' | sed -e 's/VERSION="//' -e 's/"$//')
        SORT=$(cat "$info" | grep -m 1 '^SORT=' | sed -e 's/SORT="//' -e 's/"$//')
        DESCRIPTION=$(cat "$info" | grep -m 1 '^DESCRIPTION=' | sed -e 's/DESCRIPTION="//' -e 's/"$//')
        echo -e "${info%.*}=( \"$VERSION\" \"$SORT\" \"$DESCRIPTION\" )"
    done >"$DIRMAIN/remote_info"
}

# Checks if the remote_info file exists, indicating that the local package list has been updated
# If the file does not exist, it prints an error message and suggests running the "bpm update" command
# Exits the script if the remote_info file is missing
check_packagelist() {
    if [[ ! -f "$DIRMAIN/remote_info" ]]; then
        echo -e "${ERROR} please run \"bpm update\" first"
        exit 1
    fi
}

# Starts the process of upgrading installed packages
# Checks if there are any packages installed by looking for files in the package index directory
# If no packages are found, it prints an error and exits
#
# Displays a message indicating that it is checking for updates
# Sources the remote_info file to get the latest version information for remote packages
#
# Initializes arrays to store package information and packages that need upgrading
#
# Iterates through the installed packages, comparing the local package version with the remote version:
# - If the versions do not match, the package is added to the list of packages to upgrade
# - If the versions match, it skips the package
#
# If there are packages to upgrade, it calls the add_packages function to handle the upgrade
# If no packages need upgrading, it prints a message indicating there's nothing to do
upgrade_packages() {
    if [[ -z "$(ls -A $DIRMAIN/index/)" ]]; then
        echo -e "${ERROR} No packages installed"
        exit 1
    fi

    echo -e "${INFO} Checking for updates"

    source "$DIRMAIN/remote_info"

    local packages_info=($DIRMAIN/index/*)
    local packages_to_upgrade=()
    local package_amount=${#packages_to_upgrade[@]}

    for package_info in "${packages_info[@]}"; do
        local package="${package_info##*/}"
        source "$package_info"
        REMOTE_VERSION="${!package}"
        # FIXME: this needs to be rewritten to PACKAGE_VERSION
        # Because $VERSION already existed and I had to rewrite
        # The banner code for this to work again >:3
        if [[ "$VERSION" != "$REMOTE_VERSION" ]]; then
            packages_to_upgrade+=("$package")
        else
            continue
        fi
    done

    if [[ ${#packages_to_upgrade[@]} != 0 ]]; then
        add_packages "${packages_to_upgrade[@]}"
    else
        echo -e "${SECTION} Nothing to do"
    fi
}

# Clears the cache by deleting the working directory
clean_cache() {
    echo -e "${INFO} Clearing cache..."
    rm -rf "$WORKING_DIR"
}

# Starts the process of cleaning up unnecessary or unused compilation dependencies
# Initializes an array to hold the packages that are safe to delete
#
# Changes the current directory to the index directory; if it fails, it prints an error and exits
#
# Iterates through all the package index files:
# - Sources each package's index to check if it has the COMP_DEP flag set to true
# - If COMP_DEP is true, the package is added to the list of packages to be safely deleted and resets COMP_DEP
#
# After identifying the packages to delete, it calls the del_packages function to remove them
clean_comp_deps() {
    safe_to_del=()

    cd "$DIRMAIN/index/" || {
        echo -e "failed to change dir"
        exit 1
    }

    for info in *; do
        source "$DIRMAIN/index/$info"
        if [[ "$COMP_DEP" == "true" ]]; then
            safe_to_del+=("$info")
            COMP_DEP=""
        fi
    done
    del_packages "${safe_to_del[@]}"
}

# Searches for a package in the remote package list based on a specified search term
# If no search term is provided, it prints an error and returns
#
# Initializes the search term from the first argument and prints the last updated time of the remote_info file
#
# Reads through each line of the remote_info file:
# - Skips empty lines
# - Parses the package details (name, version, repository, description) from the line
# - Matches the search term against the package name or description
# - If a match is found, it prints the package's repository, name, version, and description
search_package() {
    if [[ -z "$1" ]]; then
        echo -e "${ERROR} no package specified."
        return 1
    fi

    local search_term="$1"

    echo -e "${INFO} Last updated on $(date -r $DIRMAIN/remote "+%Y-%m-%d / %H:%M:%S")"

    # Search through the remote file
    while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        local package_name
        local version
        local repo
        local description

        # Parse the package details by splitting the line manually
        package_name="${line%%=*}"
        local content="${line#*=}"

        # Remove surrounding parentheses and quotes
        content=${content#*(}
        content=${content%)}}

        # Split the content into components
        IFS='"' read -r _ version _ repo _ description _ <<<"$content"

        # Check if the search term matches the package name or description
        if [[ "$package_name" =~ $search_term || "$description" =~ $search_term ]]; then
            echo -e "${repo}/${package_name} ${version}"
            echo -e "    ${description}"
        fi
    done <"$DIRMAIN/remote_info"
}

# Displays information about a specified package
# Checks if a package name is provided as an argument; if not, it prints an error and exits
#
# Verifies if the package's info file exists in the remote directory; if it does not, it prints an error and exits
#
# If the package info file exists, it prints the package's information by displaying the contents of the file
info_package() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no package specified."
        exit 1
    fi
    local package="$1"

    if [[ ! -f "$DIRMAIN/remote/$package.info" ]]; then
        echo -e "${ERROR} Cant get package info for $package"
        exit 1
    fi

    echo -e "${INFO} Info for $package"
    cat "$DIRMAIN/remote/$package.info"
}

# Displays the last updated timestamp for the remote package list, based on the modification time of the remote_info file
#
# Reads the remote_info file line by line to extract and display information about each package
# For each line, it:
# - Skips empty lines
# - Parses the package name, version, repository, and description by splitting and trimming the content
# - Strips away unnecessary parentheses and quotes
#
# For each package, it prints the repository, package name, version, and description in a formatted manner
info_packagelist() {
    echo -e "${INFO} Last updated on $(date -r $DIRMAIN/remote_info "+%Y-%m-%d / %H:%M:%S\n")"

    # Loop through each line in the remote file
    while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        local package_name
        local version
        local repo
        local description

        # Parse the package details by splitting the line manually
        package_name="${line%%=*}"
        local content="${line#*=}"

        # Remove surrounding parentheses and quotes
        content=${content#*(}
        content=${content%)}}

        # Split the content into components
        IFS='"' read -r _ version _ repo _ description _ <<<"$content"

        # Print the formatted output
        echo -e "${repo}/${package_name} ${version}"
        echo -e "    ${description}"

    done <"$DIRMAIN/remote_info"
}

# List all the folders in a list inside the index folder
# of the working directory of bpm to keep track of where packages
# are installed, check your bpm config file
# to see the current working directory
info_index() {
    echo -e "${INFO} Listing installed Packages\n"
    ls -1 "$DIRMAIN/index"
}

# Try not to change me every 10 commits challange (Impossible)
help_message() {
    echo -e "usage: $0 <operation> [...]"
    echo -e "operations:"
    echo -e "    bpm add     [package(s)]"
    echo -e "    bpm del     [package(s)]"
    echo -e "    bpm update"
    echo -e "    bpm upgrade"
    echo -e "    bpm config"
    echo -e "    bpm clean"
    echo -e "    bpm depclean"
    echo -e "    bpm search  [package]"
    echo -e "    bpm info    [package]"
    echo -e "    bpm list"
    echo -e "    bpm index"
    echo -e "    bpm help"
    echo -e "    bpm version"
    echo -e ""
    exit 0
}

# Generic version message with some licensing
# Displays a fitting mascot in the spirit of bash!
# (Best programming language (non negociable))
version_message() {
    echo -e ""
    echo -e "â”€â”€â”€â–„â–„â–„         bpm v$BPM_VERSION - bash 5.2.37"
    echo -e "â”€â–„â–€â–‘â–„â–‘â–€â–„       Copyright (C) 2024-present Tina-lel"
    echo -e "â”€â–ˆâ–‘â–ˆâ–„â–€â–‘â–ˆ       Copyright (C) 2024-present Justus0405"
    echo -e "â”€â–ˆâ–‘â–€â–„â–„â–€â–ˆâ–„â–ˆâ–„â–€"
    echo -e "â–„â–„â–ˆâ–„â–„â–„â–„â–ˆâ–ˆâ–ˆâ–€    This program may be freely redistributed under"
    echo -e "               the terms of the GNU General Public License v2.0"
    echo -e ""
    exit 0
}

# PROGRAM START

check_args "$@"
