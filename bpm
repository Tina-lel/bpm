#!/bin/bash
#===============================================================================
# bpm - A Bash-based System Package Manager
# Authors: Tina-lel and Justus0405
# License: GNU General Public License v2.0
# Upstream: https://github.com/Tina-lel/bpm
# Dependencies : bash, curl, tar, gzip
#
# bpm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License v2.0 for more details.
#
# You should have received a copy of the
# GNU General Public License v2.0 along with bpm.
# If not, see <https://www.gnu.org/licenses/>.
#
# Tina was here
#===============================================================================

# Global Variables
export BPM_VERSION="0.1"
export DIRMAIN="$HOME/.config/bpm"

# Color variables
export RED="\e[1;31m"
export GREEN="\e[1;32m"
export YELLOW="\e[1;33m"
export CYAN="\e[1;36m"
export GRAY="\e[1;90m"
export BOLD="\e[1m"
export ENDCOLOR="\e[0m"

# Info variables
export SUCCSESS="${GRAY}[${GREEN}âœ“${GRAY}]${ENDCOLOR}"
export ERROR="${RED}Error:${ENDCOLOR}"
export WARNING="${GRAY}[${RED}!${GRAY}]${ENDCOLOR}"
export SECTION="${GRAY}[${YELLOW}!${GRAY}]${ENDCOLOR}"
export INFO="${GRAY}[${CYAN}i${GRAY}]${ENDCOLOR}"

# FUNCTIONS

# Creates essential directories and files in case they dont exist
create_conf() {
    if [[ ! -d "$DIRMAIN" ]]; then
        mkdir -p "$DIRMAIN"
        mkdir -p "$DIRMAIN/index"
        mkdir -p "$DIRMAIN/remote"
        touch "$DIRMAIN/bpm.conf"

        echo "# Created by bpm on $(date '+%Y\%m\%d')" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "REPO=(\"\")" >>"$DIRMAIN/bpm.conf"
        echo "SORT=(\"\")" >>"$DIRMAIN/bpm.conf"
        echo "WORKING_DIR=\"$HOME/.cache/bpm\"" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "COMMON_FLAGS=\"-g -O3 -march=native -pipe\"" >>"$DIRMAIN/bpm.conf"
        echo "CFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "CPPFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "CXXFLAGS=\"\${COMMON_FLAGS}\"" >>"$DIRMAIN/bpm.conf"
        echo "MAKEFLAGS=\"-j$(nproc)\"" >>"$DIRMAIN/bpm.conf"
        echo "" >>"$DIRMAIN/bpm.conf"
        echo "RUSTFLAGS=\"--release -j $(nproc)\"" >>"$DIRMAIN/bpm.conf"
    fi
}

# Sources the config file for the script to know the working directory and repo declared by the user
# The working directory is used to download, cache and compile the packages that are about to be installed
exec_conf() {
    if [[ -f "$DIRMAIN/bpm.conf" ]]; then
        source "$DIRMAIN/bpm.conf"
    else
        echo -e "${ERROR} no config file in $DIRMAIN, use \"bpm config\" to generate one"
        exit 1
    fi

    if [[ -z "${WORKING_DIR}" ]]; then
        echo -e "${ERROR} WORKING_DIR unset, check config file"
        exit 1
    fi

    mkdir -p "$WORKING_DIR"
}

# gets passed all starting arguments in an array at # PROGRAM START
# located at the bottom of this file
#
# Runs pre-checks for each action ensuring the right paths, configs and permissions
# (except for help and verion because lol)
# Then it removes the argument from the array using shift, for further processing.
# Example: bpm add flora socat -> goes to the add case, does pre-checks, removes the first
# argument and shifts everything the left, going from $1=add $2= flora $3=socat to
# $1=flora $2=socat
check_args() {
    case $1 in
    "add")
        exec_conf
        check_packagelist
        shift
        add_packages "$@"
        ;;
    "del")
        exec_conf
        shift
        del_packages "$@"
        ;;
    "update")
        exec_conf
        update_packagelist
        ;;
    "upgrade")
        exec_conf
        #update_packagelist
        check_packagelist
        upgrade_packages
        ;;
    "config")
        create_conf
        ;;
    "clean")
        exec_conf
        clean_cache
        ;;
    "search")
        exec_conf
        check_packagelist
        shift
        search_package "$1"
        ;;
    "info")
        exec_conf
        check_packagelist
        shift
        info_package "$1"
        ;;
    "list")
        exec_conf
        check_packagelist
        info_packagelist
        ;;
    "index")
        info_index
        ;;
    "help")
        help_message
        ;;
    "version")
        version_message
        ;;
    "")
        echo -e "${ERROR} no operation specified"
        exit 1
        ;;
    *)
        echo -e "${ERROR} unrecognized option '$1'"
        exit 1
        ;;
    esac
}

# Checks if the first passed argument is empty if not then proceed with the next check
# Then checks if in a for loop for each package if it is available in the given repo using
# generic html status codes
#
# Asks kindly for consent and displays the amount, names and total net size of the packages
# that are about to be installed
#
# If confirmed passes every package in the array to the install_package function seperatly
add_packages() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no targets specified."
        exit 1
    fi

    source "$DIRMAIN/remote_info"

    local packages=("$@")
    local packages_size=0
    local packages_size_final=0
    local package_amount=${#packages[@]}

    for package in "${packages[@]}"; do
        if [[ -f "$DIRMAIN/index/$package" ]]; then
            source "$DIRMAIN/index/$package"
            REMOTE_VERSION="${!package}"
            if [[ "$VERSION" != "$REMOTE_VERSION" ]]; then
                echo -e "${SECTION} Updating $package ($VERSION -> $REMOTE_VERSION)"
            else
                echo -e "${SECTION} package $package already installed, reinstalling..."
            fi
        fi
    done

    for package_check in "${packages[@]}"; do

        cp $DIRMAIN/remote/$package_check.info "$WORKING_DIR/$package_check.info" >/dev/null 2>&1
        if [[ "$?" != 0 ]]; then
            echo -e "${ERROR} Cant get package info for $package_check"
            exit 1
        else
            source "$WORKING_DIR/$package_check.info" >/dev/null 2>&1
            packages_size=$(("$packages_size" + "$SIZE"))
            packages_size_final=$(("$packages_size_final" + "$SIZE_EXTRACT"))
        fi
    done

    echo -e ""
    echo -e "${INFO} Packages ($package_amount): ${packages[*]}"
    echo -e ""
    echo -e "Total Download Size:  $(numfmt --to=iec $packages_size)"
    echo -e "Total Extracted Size: $(numfmt --to=iec $packages_size_final)"
    echo -e ""
    read -rp "Proceed with installation? [Y/n] " confirm
    case "$confirm" in
    [nN])
        rm -f $WORKING_DIR/*.info
        echo -e "${RED}Aborted.${ENDCOLOR}"
        exit 0
        ;;
    *)
        for package_inst in "${packages[@]}"; do
            echo -e "${SECTION} Installing $package_inst"
            install_package "$package_inst"
        done
        ;;
    esac
}

# Gets the package name from the add_packages() function
# Checks if the working directory given in the config file is available
# Then downloads the package.info and package.tar.gz
# The .info file contains the $SORT variable in which is declared
# in which sub-repo the tar.gz is located, this can be specified by the maintainer
# for a more organized repo structure
#
# Checks the last line of the .info file containing the checksum for the tar.gz
# if nothing has been tampered with the tar.gz file gets extracted
#
# Creates a variable for easy path handling for the user user specified build instructions
# Unique for each package
#
# Sources the pkg_info file of the package for said instructions
# the DOWNLOAD_SRC, COMPILE_SRC and INSTALL_SC functions are all inside the pkg_info file
# which can be a bit confusing but its necessary because not every package is installed the same,
# so the instructions for installing are all in standardized format inside each package
#
# Checks $ROOT_FOR_INSTALL If the package needs root access to install
# if yes then pass all previously declared variable to the INSTALL_PKG function and run it as root
# if not just run the INSTALL_PKG normally
#
# This next part is very important, it copies the array from the pkg_info containing where the package was installed
# and puts it inside the config bpm/index folder, this keeps track of which and where packages are installed, the array of
# where the package has to be installed must be delcared by the maintainer
#
# Lastly clears all the downlaoded/compiled files from the working directory because they arent needed anymore
install_package() {
    local package="$1"
    set +e

    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }

    echo -e "${INFO} Downloading package..."
    source "$package.info" >/dev/null 2>&1
    curl -s -o "$package.tar.gz" "$REPO/$SORT/$package.tar.gz"

    # Dont forget to install coreutils for your beloved alpine Tina :3
    # yea i fukin did
    echo -e "${INFO} Verifying checksum..."
    cat "$package.info" | tail -n 1 | md5sum --quiet -c - || {
        echo -e "${ERROR} Checksum missmatch"
        exit 1
    }

    echo -e "${INFO} Extracting package..."
    tar -xzf "$package.tar.gz"
    # Used in the pkg_info file inside the package for the package
    # specified build/install instructions
    PKG_DIR="$WORKING_DIR/$package"

    echo -e "${INFO} Loading build info..."
    source "$PKG_DIR/pkg_info"
    set -e

    # Checks if DOWNLOAD is true in case the source code must be downlaoded externally
    if [[ "$DOWNLOAD" == "true" ]]; then
        echo -e "${INFO} Downloading source..."
        DOWNLOAD_SRC
    fi

    # Checks if COMPILE is true in case the source code must be compiled
    if [[ "$COMPILE" == "true" ]]; then
        echo -e "${INFO} Compiling source..."
        COMPILE_SRC
    fi

    echo -e "${INFO} Installing package..."
    if [[ "$ROOT_FOR_INSTALL" == "true" ]]; then
        # this might be a security vulnurability, but its better than before xd
        if command -v doas 2>&1 >/dev/null; then
            doas bash -c "$(declare); INSTALL_PKG" 2>/dev/null
        elif command -v sudo 2>&1 >/dev/null; then
            sudo bash -c "$(declare); INSTALL_PKG" 2>/dev/null
        fi
    else
        INSTALL_PKG
    fi

    echo "INSTALLED_FILES=(${INSTALLED_FILES[*]})" >"$DIRMAIN/index/$package"
    echo "ROOT_FOR_INSTALL=$ROOT_FOR_INSTALL" >>"$DIRMAIN/index/$package"
    echo "VERSION=$VERSION" >>"$DIRMAIN/index/$package"
    echo "SORT=$SORT" >>"$DIRMAIN/index/$package"
    echo "SIZE=$SIZE" >>"$DIRMAIN/index/$package"

    echo -e "${INFO} Cleaning up...\n"
    cd "$WORKING_DIR" || {
        echo -e "${ERROR} could not enter temp path"
        exit 1
    }
    rm -rf "$package.tar.gz" "$package.info" "$package"
}

# Checks if the first passed argument is empty if not then proceed with the next check
# Then checks if the package is present in the index, if yes then proceed
#
# Asks kindly for consent and displays the amount and names of the packages that are about
# to be removed
#
# If confirmed passes every package in the array to the remove_package function seperatly
del_packages() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no targets specified."
        exit 1
    fi

    local packages=("$@")
    local packages_size=0
    local package_amount=${#packages[@]}

    # there i fixed the shit
    for package in "${packages[@]}"; do
        if [[ ! -f "$DIRMAIN/index/$package" ]]; then
            echo -e "${ERROR} package '$package' not installed"
            exit 1
        else
            source "$DIRMAIN/index/$package"
            packages_size=$(("$packages_size" + "$SIZE"))
        fi
    done

    echo -e ""
    echo -e "${WARNING} Packages ($package_amount): ${packages[*]}"
    echo -e ""
    echo -e "Total Removed Size: -$(numfmt --to=iec $packages_size)"
    echo -e ""
    read -rp "Proceed with removal? [y/N] " confirm
    case "$confirm" in
    [yY])
        for package_del in "${packages[@]}"; do
            echo -e "${SECTION} Removing $package_del"
            remove_package "$package_del"
        done
        ;;
    *)
        echo -e "${RED}Aborted.${ENDCOLOR}"
        exit 0
        ;;
    esac
}

# Gets the package name from the del_packages() function
# Sources the index file of the package that is about to be removed,
#
# this file contains the paths in where the package was installed
# If the array containing said file locations is empty the script will remind you so
#
# If the package was installed using root the script needs to elivate its privilages to remove the files
# If a package needs to be installed using root is defined by the maintainer and kept track of inside the index file
# but if no root privilages are needed the files just get deleted normally
#
# After that the index file for the package gets deleted for the package manager to know that it is not installed anymore
remove_package() {
    local package="$1"
    source "$DIRMAIN/index/$package"

    if [[ "${#INSTALLED_FILES[@]}" == 0 ]]; then
        echo -e "${ERROR} No files to delete"
    fi

    if [[ "$ROOT_FOR_INSTALL" == "true" ]]; then
        for file_del in "${INSTALLED_FILES[@]}"; do
            echo -e "${WARNING} Deleting $file_del"
            # Does not work with doas ;)
            if command -v doas 2>&1 >/dev/null; then
                doas rm -rf "$file_del"
            elif command -v sudo 2>&1 >/dev/null; then
                sudo rm -rf "$file_del"
            fi
        done
    else
        for file_del in "${INSTALLED_FILES[@]}"; do
            echo -e "${WARNING} Deleting $file_del"
            rm -rf "$file_del"
        done
    fi

    echo -e "${WARNING} Deleting index for $package"
    rm -rf "$DIRMAIN/index/$package"
}

# This is quite something.
# Uses curl to get every .info file from the repo and proccesses the VERSION, SORT and DESCRIPTION
# and puts them in an array inside the remote file
update_packagelist() {
    set -e
    echo -e "${INFO} Refreshing local remote info"
    cd "$DIRMAIN/remote" || {
        echo -e "failed to change dir"
        exit 1
    }

    rm -rf *

    for remote_repo in "${REPO[@]}"; do
        for remote_sort in "${SORT[@]}"; do
            echo -ne "$remote_repo/$remote_sort... "
            curl --silent --output - "$remote_repo/$remote_sort/BPMINFO.tar.gz" | tar -xzf - --strip-components=1
            echo -e "${SUCCSESS}"
        done
    done

    echo -e "${INFO} Writing remote file"
    for info in *; do
        VERSION=$(cat "$info" | grep -m 1 '^VERSION=' | sed -e 's/VERSION="//' -e 's/"$//')
        SORT=$(cat "$info" | grep -m 1 '^SORT=' | sed -e 's/SORT="//' -e 's/"$//')
        DESCRIPTION=$(cat "$info" | grep -m 1 '^DESCRIPTION=' | sed -e 's/DESCRIPTION="//' -e 's/"$//')
        echo -e "${info%.*}=( \"$VERSION\" \"$SORT\" \"$DESCRIPTION\" )"
    done >"$DIRMAIN/remote_info"
}

# Checks if the user as a local packagelist for the specified repo
check_packagelist() {
    if [[ ! -f "$DIRMAIN/remote_info" ]]; then
        echo -e "${ERROR} please run \"bpm update\" first"
        exit 1
    fi
}

# First checks if there are any occurences inside the index folder of the working
# directory which stores information about every installed package
# Then it sources the remote file which contains every package and info about the
# specified repo
#
# Then it processes every pockage each in a for loop with the array inside the index
# with the array inside the remote
# The two versions inside the array get compared and if they are not the same, the
# package name gets added to the packages_to_upgrade array
# (Couldnt explain this better)
#
# Then the packages_to_upgrade array just passes every name to the add_packages()
# functions which installs them
upgrade_packages() {
    if [[ -z "$(ls -A $DIRMAIN/index/)" ]]; then
        echo -e "${ERROR} No packages installed"
        exit 1
    fi

    echo -e "${INFO} Checking for updates"

    source "$DIRMAIN/remote_info"

    local packages_info=($DIRMAIN/index/*)
    local packages_to_upgrade=()
    local package_amount=${#packages_to_upgrade[@]}

    for package_info in "${packages_info[@]}"; do
        local package="${package_info##*/}"
        source "$package_info"
        REMOTE_VERSION="${!package}"
        # FIXME: this needs to be rewritten to PACKAGE_VERSION
        if [[ "$VERSION" != "$REMOTE_VERSION" ]]; then
            packages_to_upgrade+=("$package")
        else
            continue
        fi
    done

    if [[ ${#packages_to_upgrade[@]} != 0 ]]; then
        add_packages "${packages_to_upgrade[@]}"
    else
        echo -e "${SECTION} Nothing to do"
    fi
}

# Clear the bpm cache in case something went wrong or you just
# suffer from severe OCD
clean_cache() {
    echo -e "${INFO} Clearing cache..."
    rm -rf "$WORKING_DIR"
}

# This function lists all packages from the remote file in a fancy way
#
# Verify that a search term is provided if not return an error
# Print the last updated timestamp of the remote file
# Loop through each line in the file ->
# Skip empty lines
# Parse the package name, version, repo, and description by splitting the line
# Remove unnecessary characters (parentheses and quotes)
# Check if the search term matches the package name or description
# If a match is found, format and display the details
search_package() {
    if [[ -z "$1" ]]; then
        echo -e "${ERROR} no package specified."
        return 1
    fi

    local search_term="$1"

    echo -e "${INFO} Last updated on $(date -r $DIRMAIN/remote "+%Y-%m-%d / %H:%M:%S")"

    # Search through the remote file
    while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        local package_name
        local version
        local repo
        local description

        # Parse the package details by splitting the line manually
        package_name="${line%%=*}"
        local content="${line#*=}"

        # Remove surrounding parentheses and quotes
        content=${content#*(}
        content=${content%)}}

        # Split the content into components
        IFS='"' read -r _ version _ repo _ description _ <<<"$content"

        # Check if the search term matches the package name or description
        if [[ "$package_name" =~ $search_term || "$description" =~ $search_term ]]; then
            echo -e "${repo}/${package_name} ${version}"
            echo -e "    ${description}"
        fi
    done <"$DIRMAIN/remote_info"
}

# Checks if the first passed argument is empty if not then proceed
# Checks if the package the user specified exists inside the /info directory of the repo
# If a file was found proceeds, if not then displays an error message
#
# Then uses curl to display the contents of the .info file of the given package
info_package() {
    if [[ $1 == "" ]]; then
        echo -e "${ERROR} no package specified."
        exit 1
    fi
    local package="$1"

    if [[ ! -f "$DIRMAIN/remote/$package.info" ]]; then
        echo -e "${ERROR} Cant get package info for $package"
        exit 1
    fi

    echo -e "${INFO} Info for $package"
    cat "$DIRMAIN/remote/$package.info"
}

# List all packages provided by the update_packagelist() function
# inside the remote folder of the working directory
#
# Loop through each line in the file ->
# Skip empty lines
# Parse the package name, version, repo, and description by splitting the line
# Remove unnecessary characters (parentheses and quotes)
# Format and display the parsed details
info_packagelist() {
    echo -e "${INFO} Last updated on $(date -r $DIRMAIN/remote_info "+%Y-%m-%d / %H:%M:%S\n")"

    # Loop through each line in the remote file
    while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        local package_name
        local version
        local repo
        local description

        # Parse the package details by splitting the line manually
        package_name="${line%%=*}"
        local content="${line#*=}"

        # Remove surrounding parentheses and quotes
        content=${content#*(}
        content=${content%)}}

        # Split the content into components
        IFS='"' read -r _ version _ repo _ description _ <<<"$content"

        # Print the formatted output
        echo -e "${repo}/${package_name} ${version}"
        echo -e "    ${description}"

    done <"$DIRMAIN/remote_info"
}

# List all the folders in a list inside the index folder
# of the working directory of bpm to keep track of where packages
# are installed, check your bpm config file
# to see the current working directory
info_index() {
    echo -e "${INFO} Listing installed Packages\n"
    ls -1 "$DIRMAIN/index"
}

# Try not to change me every 10 commits challange (Impossible)
help_message() {
    echo -e "usage:  bpm <operation> [...]"
    echo -e "operations:"
    echo -e "    bpm add     [package(s)]"
    echo -e "    bpm del     [package(s)]"
    echo -e "    bpm update"
    echo -e "    bpm upgrade"
    echo -e "    bpm config"
    echo -e "    bpm clean"
    echo -e "    bpm search  [package]"
    echo -e "    bpm info    [package]"
    echo -e "    bpm list"
    echo -e "    bpm index"
    echo -e "    bpm help"
    echo -e "    bpm version"
    echo -e ""
    exit 0
}

# Generic version message with some licensing
# Displays a fitting mascot in the spirit of bash!
# (Best programming language (non negociable))
version_message() {
    echo -e ""
    echo -e "â”€â”€â”€â–„â–„â–„         bpm v$BPM_VERSION - bash 5.2.37"
    echo -e "â”€â–„â–€â–‘â–„â–‘â–€â–„       Copyright (C) 2024-present Tina-lel"
    echo -e "â”€â–ˆâ–‘â–ˆâ–„â–€â–‘â–ˆ       Copyright (C) 2024-present Justus0405"
    echo -e "â”€â–ˆâ–‘â–€â–„â–„â–€â–ˆâ–„â–ˆâ–„â–€"
    echo -e "â–„â–„â–ˆâ–„â–„â–„â–„â–ˆâ–ˆâ–ˆâ–€    This program may be freely redistributed under"
    echo -e "               the terms of the GNU General Public License v2.0"
    echo -e ""
    exit 0
}

# PROGRAM START

check_args "$@"
